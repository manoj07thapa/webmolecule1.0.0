import { Fragment, useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import { Storage, withSSRContext } from "aws-amplify";
import { GridLoader } from "react-spinners";
import { StarIcon, CheckIcon } from "@heroicons/react/solid";
import { listCourses, getCourse } from "../../../../src/graphql/queries";
import CourseContent from "../../../../components/courses/CourseContent";
import StickyCourse from "../../../../components/courses/StickyCourse";
import Zoom from "react-reveal/Zoom";
import Slide from "react-reveal/Slide";

export async function getStaticPaths() {
  const SSR = withSSRContext();
  const { data } = await SSR.API.graphql({
    query: listCourses,
    authMode: "AWS_IAM",
  });
  const paths = data.listCourses.items.map((course) => ({
    params: {
      id: course.id,
      category: course.category,
      framework: course.framework,
    },
  }));
  return {
    fallback: true,
    paths,
  };
}

export async function getStaticProps({ params }) {
  const SSR = withSSRContext();
  const { data } = await SSR.API.graphql({
    query: getCourse,
    variables: {
      id: params.id,
    },
    authMode: "AWS_IAM",
  });
  return {
    props: {
      ssgCourse: data.getCourse,
    },
  };
}

const Course = ({ ssgCourse }) => {
  const router = useRouter();
  // console.log("ROUTER", router);
  console.log("COURSES", ssgCourse);

  const [courseImage, setCourseImage] = useState(null);

  const fetchCourse = useCallback(async () => {
    try {
      if (ssgCourse.files) {
        const imageKey = await Storage.get(ssgCourse.files);
        setCourseImage(imageKey);
      }
    } catch (error) {
      console.log("error", error);
    }
  }, [ssgCourse]);

  useEffect(() => {
    fetchCourse();
  }, [fetchCourse]);

  if (router.isFallback) {
    return (
      <div className="grid place-content-center">
        <GridLoader />
      </div>
    );
  }
  return (
    <Fragment>
      <Head>
        <title>{`Course | ${router.query.framework}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" pb-12 flex ">
        <div className="w-full">
          <div className="bg-violet-200 w-full md:py-12 ">
            <section className="md:hidden">
              {courseImage && (
                <Image
                  src={courseImage}
                  height={40}
                  width={100}
                  alt="course image"
                  objectFit="cover"
                  layout="responsive"
                  objectPosition="center center"
                  className="shadow-md "
                  priority
                />
              )}
            </section>
            {/** Hero section*/}
            <section className="max-w-4xl mx-auto px-4  space-y-1 py-6 ">
              <div>
                <h1 className="text-gray-900 text-xl md:text-5xl font-bold md:font-extrabold tracking-wide">
                  {ssgCourse.title}
                </h1>
                <h3 className="text-gray-700 text-sm md:text-lg mt-1 font-medium">
                  {ssgCourse.subtitle}
                </h3>
                <div className="">
                  <p className="text-gray-700 text-sm ">
                    Created by{" "}
                    <span className="text-lg font-medium text-indigo-900 underline">
                      {ssgCourse.tutor}{" "}
                      <span className="text-xs text-gray-800">
                        ({ssgCourse.tutorWho})
                      </span>
                    </span>
                  </p>
                  <p className="flex space-x-1 pt-1">
                    <StarIcon className="h-4 w-4 text-red-500" />
                    <StarIcon className="h-4 w-4 text-red-500" />
                    <StarIcon className="h-4 w-4 text-red-500" />
                    <StarIcon className="h-4 w-4 text-red-500" />
                  </p>
                  <p className="text-sm text-gray-800 pt-1 font-semibold tracking-wide">
                    {ssgCourse.level}
                  </p>
                </div>
              </div>
            </section>
          </div>

          <div className=" max-w-4xl mx-auto px-4  space-y-12  ">
            {/** you will learn section*/}
            <section className="border border-gray-800 py-6 px-2 mt-7 w-5/6">
              <h3 className="text-lg font-semibold tracking-wide">
                What you will learn
              </h3>
              <div className="mt-2">
                <div className="space-y-4 pt-1 pl-0 md:grid grid-cols-2 gap-5">
                  {ssgCourse.youLearn.map((item, idx) => (
                    <div key={idx} className="flex space-x-3 items-center">
                      <CheckIcon className="h-3 w-3 text-indigo-700" />
                      <p className="text-sm text-gray-300">{item}</p>
                    </div>
                  ))}
                </div>
              </div>
            </section>
            {/** Relate skills section */}
            <Slide left>
              <section className="">
                <h3 className="text-lg font-semibold tracking-wide">
                  Related Stacks
                </h3>
                <div className="flex items-center space-x-3 mt-2">
                  {ssgCourse.relatedSkills.map((skill) => (
                    <div key={skill}>
                      <p className="bg-gray-800 px-1 py-0.5 rounded-full text-gray-300 shadow-md text-xs">
                        {skill}
                      </p>
                    </div>
                  ))}
                </div>
              </section>
            </Slide>
            {/** course content section */}
            <section className="border border-gray-800 py-4 px-2 w-5/6">
              <CourseContent courseContent={ssgCourse.courseContent} />
            </section>
            {/** course required knowledge section */}
            <section className="md:hidden">
              <h3 className="text-lg font-semibold tracking-wide">
                Required Knowledge
              </h3>
              <p className="text-medium text-gray-300">
                - {ssgCourse.reqKnowledge}
              </p>
            </section>
            {/** course duration section */}
            <Slide left>
              <section className="md:hidden">
                <h3 className="text-lg font-semibold tracking-wide">
                  Duration{" "}
                </h3>
                <p className="text-medium text-gray-300">
                  {ssgCourse.duration}
                </p>
              </section>
            </Slide>
            {/** course time section */}
            <Zoom left>
              <section className="md:hidden">
                <h3 className="text-lg font-semibold tracking-wide">Time </h3>
                <p className="text-medium text-gray-300">{ssgCourse.time}</p>
              </section>
            </Zoom>
            {/** course cost  section */}
            <section className="md:hidden">
              <h3 className="text-lg font-semibold tracking-wide">
                Total cost{" "}
              </h3>
              <p className="text-medium text-gray-300">Rs, {ssgCourse.price}</p>
            </section>
            {/** course signup section */}
            <section className="md:hidden">
              <button
                type="submit"
                className="bg-pink-500 w-full rounded-md shadow-md px-4 py-2 hover:bg-pink-600 transition ease-in-out"
              >
                SignUp for the course
              </button>
            </section>
          </div>
        </div>
        <StickyCourse course={ssgCourse} image={courseImage} />
      </div>
    </Fragment>
  );
};

// Course.PageLayout = StickyCourse;

export default Course;
