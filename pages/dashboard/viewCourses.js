import { Fragment, useState, useEffect } from "react";
import Head from "next/head";
import { withSSRContext } from "aws-amplify";
import SidebarLayout from "../../components/dashboard/SidebarLayout";
import CourseTable from "../../components/dashboard/course/CourseTable";
import RingSpinner from "../../components/loading/RingSpinner";
import { useRouter } from "next/router";
import { listCourses, listUsers } from "../../src/graphql/queries";
import { API, Storage } from "aws-amplify";
import { deleteCourse, updateCourse } from "../../src/graphql/mutations";

const ViewCourses = () => {
  const router = useRouter();
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(false);
  console.log("DATA", courses);

  const fetchCourses = async () => {
    try {
      // setLoading(true);
      const res = await API.graphql({
        query: listCourses,
        authMode: "AMAZON_COGNITO_USER_POOLS",
      });

      setCourses(res.data.listCourses.items);
      setLoading(false);
    } catch (error) {
      console.log(error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, []);

  const removeCourse = async (id) => {
    try {
      await API.graphql({
        query: deleteCourse,
        variables: { input: { id } },
        authMode: "AMAZON_COGNITO_USER_POOLS",
      });
      fetchCourses();
    } catch (error) {
      console.log(error);
    }
  };
  if (loading) {
    return <div>Loading..</div>;
  }
  if (!courses) {
    return <div>No courses</div>;
  }
  return (
    <Fragment>
      <Head>
        <title>Dashboard | Courses</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full">
        <h1 className="text-center tracking-wider leading-6 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-xl font-bold rounded-md shadow-md px-4 py-3">
          Course List
        </h1>
        <div className="mt-12">
          <CourseTable courses={courses} removeCourse={removeCourse} />
        </div>
      </div>
    </Fragment>
  );
};
ViewCourses.PageLayout = SidebarLayout;

export default ViewCourses;

export async function getServerSideProps({ req }) {
  const SSR = withSSRContext({ req });

  try {
    const user = await SSR.Auth.currentAuthenticatedUser();
    const group =
      user?.signInUserSession?.accessToken?.payload["cognito:groups"];

    if (user && !group.includes("admin")) {
      return {
        notFound: true,
      };
    }
  } catch (error) {
    if ((error = "The user is not authenticated")) {
      return {
        notFound: true,
      };
    }
  }

  return {
    props: {},
  };
}
